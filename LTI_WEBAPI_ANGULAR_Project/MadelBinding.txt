 [HttpGet]
        public string Get(string id, bool? isTest)
        {


            return $"Id  :{id}Istest :{isTest}";
        }
====================================
 public ActionResult<string> Get(string id, bool? isTest)
        {
            if (!isTest.HasValue)
            { return BadRequest("is test is required"); }


            return $"Id  :{id}Istest :{isTest}";
        }
=========================================================
  var errors = new List<string>();

            if (!isTest.HasValue)
            { errors.Add("is Test is required "); }

            if(string.IsNullOrEmpty(id))
            { errors.Add("id is required "); }

            if (errors.Count > 0)
                return BadRequest(errors);

            return $"Id  :{id} Istest :{isTest}";

=======================================================

           if (!isTest.HasValue)
            {
                ModelState.AddModelError(nameof(isTest), "IsTest is required");
                }
            if(string.IsNullOrEmpty(id))
            {
                ModelState.AddModelError(nameof(id), "id is required");
            }
            if (!ModelState.IsValid)
                return BadRequest(ModelState);

            return $"Id  :{id} Istest :{isTest}";
============================================================


crud
  [HttpGet("{id}")]
        public async Task<ActionResult<Customer>> GetCustomer(int id)
        {
            var customer = await _context.customers.FirstOrDefaultAsync(customer => customer.CustomerId == id);
            if(customer==null)
            { return NotFound(); }
            return Ok(customer);
        }    

